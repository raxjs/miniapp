const { existsSync, mkdirpSync } = require('fs-extra');
const { join } = require('path');
const { getOptions } = require('loader-utils');
const chalk = require('chalk');
const { constants: { QUICKAPP }} = require('miniapp-builder-shared');
const { doubleBackslash, getHighestPriorityPackage } = require('./utils/pathHelper');
const eliminateDeadCode = require('./utils/dce');
const defaultStyle = require('./defaultStyle');
const processCSS = require('./styleProcessor');
const { output } = require('./output');
const { isTypescriptFile } = require('./utils/judgeModule');
const parse = require('./utils/parseRequest');

function createImportStatement(req) {
  return `import '${doubleBackslash(req)}';`;
}

function generateDependencies(dependencies) {
  return Object
    .keys(dependencies)
    .map(mod => createImportStatement(mod))
    .join('\n');
}

module.exports = async function appLoader(content) {
  const query = parse(this.request);
  // Only handle app role file
  if (query.role !== 'app') {
    return content;
  }

  const loaderOptions = getOptions(this);
  const { rootDir, entryPath, outputPath, platform, mode, disableCopyNpm, turnOffSourceMap, aliasEntries } = loaderOptions;
  const rawContent = content;

  if (!existsSync(outputPath)) mkdirpSync(outputPath);

  const sourcePath = join(this.rootContext, entryPath);

  const JSXCompilerPath = getHighestPriorityPackage('jsx-compiler', this.rootContext);
  const compiler = require(JSXCompilerPath);

  const compilerOptions = Object.assign({}, compiler.baseOptions, {
    resourcePath: this.resourcePath,
    outputPath,
    sourcePath,
    platform,
    type: 'app',
    sourceFileName: this.resourcePath,
    disableCopyNpm,
    turnOffSourceMap,
    aliasEntries,
    modernMode: !!rootDir
  });

  const rawContentAfterDCE = eliminateDeadCode(rawContent);

  let transformed;
  try {
    transformed = compiler(rawContentAfterDCE, compilerOptions);
  } catch (e) {
    console.log(chalk.red(`\n[${platform.name}] Error occured when handling App ${this.resourcePath}`));
    if (process.env.DEBUG === 'true') {
      throw new Error(e);
    } else {
      const errMsg = e.node ? `${e.message}\nat ${this.resourcePath}` : `Unknown compile error! please check your code at ${this.resourcePath}`;
      throw new Error(errMsg);
    }
  }

  const { style, assets } = await processCSS(transformed.cssFiles, sourcePath);
  transformed.style = style;
  transformed.assets = assets;

  const outputContent = {
    code: transformed.code,
    map: transformed.map,
    css: transformed.style ? defaultStyle + transformed.style : defaultStyle,
  };
  const outputOption = {
    outputPath: {
      code: join(outputPath, platform.type === QUICKAPP ? 'app.ux' : 'app.js'),
      css: join(outputPath, 'app' + platform.extension.css),
    },
    mode,
    isTypescriptFile: isTypescriptFile(this.resourcePath),
    type: 'app',
    platform,
    rootDir,
  };

  output(outputContent, rawContent, outputOption);

  return [
    `/* Generated by JSX2MP AppLoader, sourceFile: ${this.resourcePath}. */`,
    generateDependencies(transformed.imported),
  ].join('\n');
};
